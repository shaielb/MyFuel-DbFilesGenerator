package generator;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import utilities.FileUtil;
import utilities.StringUtil;
import xml.parser.XmlParser;

@SuppressWarnings("serial")
public class ControlsMapGenerator extends EntityGenerator {

	Set<String> controlsInstanciators = new LinkedHashSet<String>();
	Set<String> instanciators = new LinkedHashSet<String>();
	Set<String> initializers = new LinkedHashSet<String>();
	List<String> fields = new ArrayList<String>();
	List<String> groupedControls = new ArrayList<String>();

	public void initializeControls() {
		controlsInstanciators = new LinkedHashSet<String>();
		instanciators = new LinkedHashSet<String>();
		initializers = new LinkedHashSet<String>();
		fields = new ArrayList<String>();
		groupedControls = new ArrayList<String>();
	}

	public void generateSceneSwitch(File[] files) throws IOException {
		List<String> list = new ArrayList<String>();
		for (File file : files) {
			String fName = file.getName();
			if (fName.endsWith(".fxml")) {
				String className = fName.substring(0, fName.lastIndexOf("."));
				list.add(String.format("		_scenesMap.put(\"%s\", new %s(sceneSwitcher));", className, className));
			}
		}
		String template = "package sceneswitch;\r\n" + 
				"\r\n" + 
				"import java.util.HashMap;\r\n" + 
				"import java.util.Map;\r\n" + 
				"\r\n" + 
				"import javafx.stage.Stage;\r\n" + 
				"import sceneswitch.SceneBase.ISceneSwitcher;\r\n" + 
				"import wrapper.*;\r\n" + 
				"\r\n" +
				"public class ScenesSwitch {\r\n" + 
				"\r\n" + 
				"	private Map<String, SceneBase> _scenesMap = new HashMap<String, SceneBase>();\r\n" + 
				"	\r\n" + 
				"	public ScenesSwitch(Stage stage) {\r\n" + 
				"		ISceneSwitcher sceneSwitcher = (scenesName) -> { stage.setScene(_scenesMap.get(scenesName).getScene()); };\r\n" + 
				"		\r\n" + 
				String.join("\r\n", list) +
				"\r\n" + 
				"	}\r\n" + 
				"}\r\n";
		File fileToWrite = new File("C:\\Java\\myFuelWorkspace\\MyFuelClient\\src\\sceneswitch\\ScenesSwitch.java");
		FileUtil.writeToFile(fileToWrite, template);
	}

	public void generateControlsWrappers(File directoryTo) throws Exception {
		Set<String> imports = new HashSet<String>();
		imports.add("import java.util.HashMap;");
		imports.add("import javafx.scene.Scene;");
		imports.add("import javafx.scene.image.ImageView;");
		imports.add("import controls.*;");
		imports.add("import sceneswitch.SceneBase;");
		imports.add("import javafx.fxml.FXMLLoader;");
		imports.add("import javafx.scene.Parent;");
		imports.add("import javafx.scene.control.*;");
		imports.add("import annotations.AutoGenerated;");
		imports.add("import action.*;");
		imports.add("import java.util.HashSet;");
		imports.add("import java.util.Set;");
		imports.add("import db.interfaces.IEntity;");
		imports.add("import javafx.scene.text.Text;");
		imports.add("import javafx.scene.layout.BorderPane;");
		imports.add("import widgets.table.Table;");
		imports.add("import table.MfTable;");
		imports.add("import widgets.table.*;");

		File outputDir = directoryTo;//"C:\\Java\\myFuelWorkspace\\MyFuelClient\\src\\wrapper");
		File[] files = new File("C:\\Java\\myFuelWorkspace\\MyFuelClient\\src\\application").listFiles();

		generateSceneSwitch(files);

		for (File file : files) {
			String fName = file.getName();
			if (fName.endsWith(".fxml")) {
				initializeControls();
				//"C:\\Java\\myFuelWorkspace\\MyFuelClient\\src\\application\\HomeHeatingTrack.fxml"
				prepareCollectionsFromFile(file.getAbsolutePath());

				if (groupedControls.size() > 0) {
					imports.add("import adapter.base.ControlAdapter;");
				}
				String className = fName.substring(0, fName.lastIndexOf("."));
				String template = StringUtil.replace(
						"package wrapper;\r\n" + 
								"\r\n" + 
								"<Imports>\r\n" + 
								"\r\n" + 
								"@AutoGenerated\r\n" + 
								"public class <ClassName> extends SceneBase {\r\n" + 
								"\r\n" + 
								"	public <ClassName>(ISceneSwitcher sceneSwitcher) {\r\n" + 
								"		super(sceneSwitcher);\r\n" + 
								"	}\r\n\n" + 
								"	public void initialize() {\r\n" + 
								"		Parent root = FXMLLoader.load(getClass().getResource(\"<FileName>\"));\r\n" + 
								"		_scene = new Scene(root);\r\n\n" +
								"\t\t//entities instantiation\r\n" +
								"<EntitiesInstanciation>\r\n\n" +
								"\t\t//controls instantiation\r\n" +
								"<ControlsInstanciation>\r\n\n" +
								"\t\t//initializations\r\n" +
								"<EntitiesInitializers>\r\n\n" +
								"\t\t//fields initializations\r\n" +
								"<EntitiesFields>\r\n\n" +
								"\t\t//grouping\r\n" +
								"<Groups>\r\n" +
								"	}\r\n\n" +
								"}", new HashMap<String, String>() {{
									put("<Imports>", String.join("\r\n", imports));
									put("<ClassName>", className);
									put("<FileName>", fName);
									put("<EntitiesInstanciation>", String.join("\r\n", instanciators));
									put("<ControlsInstanciation>", String.join("\r\n", controlsInstanciators));
									put("<EntitiesInitializers>", String.join("\r\n", initializers));
									put("<EntitiesFields>", String.join("\r\n\n", fields));
									put("<Groups>", String.join("\r\n", groupedControls));
								}});

				File fileToWrite = new File(String.format("%s\\%s.java", outputDir, className));
				FileUtil.writeToFile(fileToWrite, template);
			}
		}

		System.out.println("");
	}

	private void populateTableControl(String controlName, String fxId, Map<String, List<String>> grouped) {
		String[] paramValuesParts = fxId.split("\\$\\$");
		String[] entitiesParts = paramValuesParts[0].split("\\$");
		String lastObjectName = null;
		for (int i = 1; i < entitiesParts.length - 1; ++i) {
			String className = StringUtil.swithToUpperCase(entitiesParts[i], "_");
			String objectName = StringUtil.firstToLowerCase(className);
			instanciators.add(String.format("\t\t%s %s = new %s();", className, objectName, className));
			if (i > 1) {
				initializers.add(String.format("\t\t%s.set%s(%s);", lastObjectName, className, objectName));
			}
			lastObjectName = objectName;
		}

		String field = entitiesParts[entitiesParts.length - 1];
		String fieldVarName = StringUtil.swithToUpperCase(field, "_");
		fieldVarName = StringUtil.firstToLowerCase(fieldVarName);

		String fvName = fieldVarName;
		String loName = lastObjectName;
		String value = paramValuesParts.length > 1 ? 
				StringUtil.firstToUpperCase(paramValuesParts[1]) : "";
				controlsInstanciators.add(
						StringUtil.replace(
								"\t\tMf<Control> <FieldVarName>Control<Value> = new Mf<Control>((<Control>) _scene.lookup(\"#<FxId>\"));",
								new HashMap<String, String>() {{
									put("<Control>", controlName);
									put("<Value>", value);
									put("<FieldVarName>", fvName);
									put("<FxId>", fxId);
								}}));
				fields.add(
						StringUtil.replace(
								"\t\t<FieldVarName>Control<Value>.setField(<Entity>.getClass().getField(\"_<FieldName>\"));\r\n" +
										"\t\t<FieldVarName>Control<Value>.setEntity(<Entity>);\n",
										new HashMap<String, String>() {{
											put("<FieldVarName>", fvName);
											put("<Value>", value);
											put("<FieldName>", field);
											put("<Entity>", loName);
										}}));
				String groupKey = paramValuesParts[0];
				if (!grouped.containsKey(groupKey)) {
					grouped.put(groupKey, new ArrayList<String>());
				}
				grouped.get(groupKey).add(fieldVarName + "Control" + value);
	}

	private void populateActionControl(String controlName, String fxId) {
		String[] parts = fxId.split("\\$");
		String action = parts[1];
		String table = parts[parts.length - 1];
		String className = StringUtil.swithToUpperCase(table, "_");
		String objectName = StringUtil.firstToLowerCase(className);

		String capabilityEntity = "";
		if ("insert".equals(action) || "remove".equals(action)) {
			capabilityEntity = "\t\t<FieldVarName><UAction>Capability.addEntity(" + objectName + ");\n";
		}
		else if ("filter".equals(action)) {
			capabilityEntity = "\t\t<FieldVarName><UAction>Capability.setQueryEntity(" + objectName + ", null);\n";
		}
		else if ("update".equals(action)) {
			capabilityEntity = 
					"\t\tSet<IEntity> <FieldVarName><UAction>Entities = new HashSet<IEntity>();\n" + 
							"\t\t<FieldVarName><UAction>Capability.setEntities(<FieldVarName><UAction>Entities);\n";
		}

		initializers.add(
				StringUtil.replace(
						"\t\tMf<Control> <FieldVarName>Control = new Mf<Control>((<Control>) _scene.lookup(\"#<FxId>\"));\n" + 
								"\t\tActionControl <Action>Action = new ActionControl();\n" + 
								"\t\t<Action>Action.setControl(<FieldVarName>Control);\n" + 
								"\t\t<UAction>Capability <FieldVarName><UAction>Capability = new <UAction>Capability();\n" +
								capabilityEntity + 

								"\t\t<Action>Action.addCapability(<FieldVarName><UAction>Capability);\n" + 
								"\t\t<Action>Action.setCallback((response) -> {});\r\n",
								new HashMap<String, String>() {{
									put("<FieldVarName>", objectName);
									put("<Control>", controlName);
									put("<Action>", action);
									put("<UAction>", StringUtil.firstToUpperCase(action));
									put("<FxId>", fxId);
								}}));
	}

	private void populateUiTables(String controlName, String fxId) {
		String[] parts = fxId.split("\\$");
		String editable = parts[1];
		String type = parts[2];
		String table = parts[3];
		String className = StringUtil.swithToUpperCase(table, "_");
		String objectName = StringUtil.firstToLowerCase(className);

		initializers.add(
				StringUtil.replace(
						"\t\tBorderPane <FieldVarName>Bp = (BorderPane) _scene.lookup(\"#<FxId>\");\n" + 
								"\t\tTable<<ClassName>> <FieldVarName>TableWrapper = new Table<<ClassName>>();\n" + 
								"\t\tMfTable<<ClassName>> <FieldVarName>Table = new MfTable<<ClassName>>(<ClassName>.class);\n" + 
								"\t\t<FieldVarName>Table.setEditable(<Editable>);\n" + 
								"\t\tMf<UType>Capability<<ClassName>> <FieldVarName><UType>Capability = new Mf<UType>Capability<<ClassName>>();\n" + 
								"\t\t<FieldVarName>TableWrapper.addCapability(<FieldVarName><UType>Capability);\n" + 
								"\t\t<FieldVarName>TableWrapper.setTable(<FieldVarName>Table);\n" + 
								"\t\t<FieldVarName>Bp.setCenter(<FieldVarName>Table.getInstance());\n",
								new HashMap<String, String>() {{
									put("<ClassName>", className);
									put("<FieldVarName>", objectName);
									put("<UType>", StringUtil.firstToUpperCase(type));
									put("<Editable>", "editable".equals(editable) ? "true" : "false");
									put("<FxId>", fxId);
								}}));
	}

	private void populateSceneControls(String controlName, String fxId) {
		String[] parts = fxId.split("\\$");
		String sceneName = parts[1];
		initializers.add(
				StringUtil.replace(
						"\t\tMf<Control> <LSceneName>Control = new Mf<Control>((<Control>) _scene.lookup(\"#<FxId>\"));\n" + 
								"\t\t<LSceneName>Control.addEvent((event) -> { _switcher.switchScene(\"<SceneName>\"); });\r\n\n",
								new HashMap<String, String>() {{
									put("<LSceneName>", StringUtil.firstToLowerCase(sceneName));
									put("<SceneName>", sceneName);
									put("<Control>", controlName);
									put("<FxId>", fxId);
								}}));
	}

	private void prepareCollectionsFromFile(String file) {
		try {
			Map<String, List<String>> grouped = new HashMap<String, List<String>>();
			XmlParser.parse(file, 
					(node) -> {
						String controlName = node.getNodeName();
						NamedNodeMap attributes = node.getAttributes();
						Node fxIdNode = attributes.getNamedItem("fx:id");
						if (fxIdNode != null) {
							String fxId = fxIdNode.getNodeValue();
							if (fxId.startsWith("table$")) {
								populateTableControl(controlName, fxId, grouped);
							}
							else if (fxId.startsWith("action$")) {
								populateActionControl(controlName, fxId);
							}
							else if (fxId.startsWith("uitable$")) {
								populateUiTables(controlName, fxId);
							}
							else if (fxId.startsWith("scene$")) {
								populateSceneControls(controlName, fxId);
							}
							System.out.println();
						}
					});

			for (Entry<String, List<String>> entry : grouped.entrySet()) {
				if (entry.getValue().size() > 1) {
					groupedControls.add(String.format("\t\tgroupControls(new ControlAdapter[] { %s });", 
							String.join(", ", entry.getValue())));
				}
			}
			System.out.println();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
