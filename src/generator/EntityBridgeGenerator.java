package generator;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import utilities.FileUtil;
import utilities.StringUtil;

@SuppressWarnings("serial")
public class EntityBridgeGenerator extends EntityGenerator {

	public void generateEntityBridge(File directory, String table, Map<String, String> info) throws IOException {
		String className = StringUtil.swithToUpperCase(table, "_");
		String path = directory.getAbsolutePath();
		String packageName = path.substring(path.lastIndexOf("db\\entity") + "db\\entity".length()).replace("\\", ".");
		String template = StringUtil.replace(
				"package db.entity<Package>;\r\n" + 
						"\r\n" + 
						"<Imports>\r\n" + 
						"\r\n" + 
						"@AutoGenerated\r\n" + 
						"public class <ClassName>Bridge implements IEntityBridge {\r\n" + 
						"\r\n" + 
						"	private static final String TableName = \"<TableName>\";\r\n\n" +
						"	private static Object _lock = new Object();\r\n" + 
						"	private static <ClassName>Bridge _instance;\r\n" + 
						"	\r\n" + 
						"	private <ClassName>Bridge() {}\r\n\n" +
						"	public static <ClassName>Bridge getInstance() {\r\n" + 
						"		if (_instance == null) {\r\n" + 
						"			synchronized(_lock) {\r\n" + 
						"				if (_instance == null) {\r\n" + 
						"					_instance = new <ClassName>Bridge();\r\n" +
						"				}\r\n" +
						"			}\r\n" +
						"		}\r\n" +
						"		return _instance;\r\n" +
						"	}\r\n\n" +
						"	public IEntity createEntity() {\r\n" + 
						"		return new <ClassName>();\r\n" + 
						"	}\r\n\n" +
						"	@Override\r\n" +
						"	public void populateEntity(IEntity ientity, IGetValue<Integer, String, Object, Object> iterator) throws SQLException, InterruptedException {\r\n" + 
						"		<ClassName> entity = (<ClassName>) ientity;\r\n" + 
						"<PopulateEntity>\r\n" + 
						"	}\r\n\n" +
						"	@Override\r\n" +
						"	public void collectFromEntity(IEntity ientity, ISetValue<Integer, String, Object> iterator) throws SQLException, InterruptedException {\r\n" + 
						"		<ClassName> entity = (<ClassName>) ientity;\r\n" + 
						"<CollectFromEntity>\r\n" + 
						"	}\r\n\n" +
						"	@Override\r\n" +
						"	public void accept(IEntity entity, Visitor visitor) {\r\n" + 
						"		visitor.visit((<ClassName>) entity);\r\n" + 
						"	}\r\n\n" +
						"	@Override\r\n" +
						"	public String getTableName() {\r\n" +
						"		return TableName;\r\n" + 
						"	}\r\n\n" + 
						"	@Override\r\n" +
						"	public List<IEntity> getForeignEntities(IEntity ientity) {\r\n" +
						"		<ClassName> entity = (<ClassName>) ientity;\r\n" + 
						"		List<IEntity> list = new ArrayList<IEntity>();\r\n" +
						"<CollectForeignEntities>\r\n" + 
						"		return list;\r\n" + 
						"	}\r\n" + 
						"}", new HashMap<String, String>() {{
							put("<ClassName>", className);
							put("<TableName>", table);
							put("<Package>", packageName);
						}});

		List<String> setValues = new ArrayList<String>();
		List<String> getValues = new ArrayList<String>();
		List<String> foreignEntities = new ArrayList<String>();
		Set<String> imports = new HashSet<String>();
		List<String> updateForeignKeys = new ArrayList<String>();
		List<String> insertForeignKeys = new ArrayList<String>();

		imports.add("import annotations.AutoGenerated;");
		imports.add("import visitor.Visitor;");
		imports.add("import java.sql.SQLException;");
		imports.add("import db.interfaces.*;");
		imports.add(String.format("import db.entity.%s;", className));
		imports.add("import java.util.ArrayList;");
		imports.add("import java.util.List;");

		int i = 0;
		for (Entry<String, String> entry : info.entrySet()) {
			String name = entry.getKey();

			String type = entry.getValue();
			String typeName = type.substring(type.lastIndexOf(".") + 1, type.length());
			String attributeName = StringUtil.swithToUpperCase(name.replaceAll("_fk$", ""), "_");

			//boolean isFk = name.endsWith("_fk");
			setValues.add(StringUtil.replace(
					"		iterator.set(" + i + ", \"<Name>\", entity.get<AttributeName>());"
					, new HashMap<String, String>() {{
						put("<Name>", name);
						put("<ClassName>", className);
						put("<AttributeName>", attributeName);
					}}));
			//if (!isFk) {
			imports.add(String.format("import %s;", type));
			getValues.add(StringUtil.replace(
					"		entity.set<AttributeName>((<TypeName>) iterator.get(" + i + ", \"<Name>\", entity.get<AttributeName>()));"
					, new HashMap<String, String>() {{
						put("<ClassName>", className);
						put("<AttributeName>", attributeName);
						put("<TypeName>", typeName);
						put("<Name>", name);
					}}));
			//}
			if (name.endsWith("_fk")) {
				foreignEntities.add(StringUtil.replace(
						"		list.add(entity.get<AttributeName>());"
						, new HashMap<String, String>() {{
							put("<AttributeName>", attributeName);
						}}));
			}
			++i;
		}
		template = StringUtil.replace(template, new HashMap<String, String>() {{
			put("<CollectFromEntity>", String.join("\n", setValues));
			put("<PopulateEntity>", String.join("\n", getValues));
			put("<Imports>", String.join("\n", imports));
			put("<CollectForeignEntities>", String.join("\n", foreignEntities));
		}});
		template = StringUtil.replace(template, new HashMap<String, String>() {{
			put("<UpdateForeignKeys>", String.join("\n", updateForeignKeys));
			put("<InsertForeignKeys>", String.join("\n", insertForeignKeys));
		}});

		File file = new File(String.format("%s\\%s.java", directory.getAbsolutePath(), className + "Bridge"));
		FileUtil.writeToFile(file, template);
		System.out.println("");
	}
}
