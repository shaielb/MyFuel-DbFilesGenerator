package generator;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import db.connections.MySqlConnection;
import utilities.StringUtil;

public class EntityClassGenerator extends EntityGenerator {
	
	private MySqlConnection _connection;

	public void generateEntity(File directory, String table, Map<String, String> info) throws IOException {
		Map<String, String> fkMap = _connection.retrieveTableFkMap(table);
		
		Set<String> imports = new HashSet<String>();
		List<String> fields = new ArrayList<String>();
		List<String> accessers = new ArrayList<String>();
		List<String> toString = new ArrayList<String>();

		imports.add("import annotations.Column;");
		imports.add("import annotations.Table;");
		imports.add("import annotations.AutoGenerated;");
		imports.add("import java.io.Serializable;");
		imports.add("import db.interfaces.IEntity;");
		imports.add("import java.util.ArrayList;");
		imports.add("import java.util.List;");

		fields.add("\tprivate static final long serialVersionUID = 1L;");

		String className = StringUtil.swithToUpperCase(table, "_");
		String classTitle = String.format("@AutoGenerated\n@Table(Name=\"%s\")\npublic class %s implements IEntity, Serializable {", table, className);
		int i = 0;
		for (Entry<String, String> entry : info.entrySet()) {
			String name = entry.getKey();
			String type = entry.getValue();
			String typeName = type.substring(type.lastIndexOf(".") + 1, type.length());
			String attributeName = StringUtil.swithToUpperCase(name, "_");
			String varName = name;
			String fkTable = "";
			if (name.endsWith("_fk")) {
				fkTable = String.format("\t@Table(Name=\"%s\")\n", fkMap.get(name));
				varName = name.replace("_fk", "");
				attributeName = StringUtil.swithToUpperCase(varName, "_");
			}
			imports.add(String.format("import %s;", type));
			fields.add(String.format(
					"\t@Column(Name=\"%s\", Index=%d)\n" + 
					fkTable + 
					"\tprivate %s _%s;", name, i, typeName, varName));
			accessers.add(String.format("\tpublic %s get%s() {\n\t\treturn _%s;\n\t}", 
					typeName, attributeName, varName));
			accessers.add(String.format("\tpublic void set%s(%s %s) {\n\t\t_%s = %s;\n\t}", 
					attributeName, typeName, varName, varName, varName));
			toString.add(String.format(
					"\t\tif (_%s != null) {\n" + 
					"\t\t\tlist.add(\"\t%s: \" + _%s);\n" + 
					"\t\t}", varName, varName, varName));
			++i;
		}
		accessers.add(String.format(
				"\tpublic String toString() {\n" + 
					"\t\tList<String> list = new ArrayList<String>();\n" +
					String.join("\n", toString) + "\n" + 
					"\t\treturn \"table %s:\\n\" + String.join(\"\\n\", list);\n\t}", table));

		createTableFile(directory, classTitle, className, imports, fields, null, accessers);
		System.out.println("");
	}
	
	public void setConnection(MySqlConnection connection) {
		_connection = connection;
	}
}
